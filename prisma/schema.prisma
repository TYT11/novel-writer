generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          SystemRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  projects      Novel[]
  collaborations Collaboration[] // on novels or chapters
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Novel {
  id            String         @id @default(cuid())
  name          String
  description   String?
  creatorId     String
  creator       User           @relation(fields: [creatorId], references: [id])
  chapters      Chapter[]
  collaborations Collaboration[] // Collaboration can be on the entire novel
}

model Chapter {
  id          String   @id @default(cuid())
  title       String?
  content     Bytes?
  projectId   String
  novel     Novel @relation(fields: [projectId], references: [id])
  collaborations Collaboration[] // Collaboration can be on specific chapters
}

model Collaboration {
  id          String   @id @default(cuid())
  userId      String
  projectId   String?  // If collaboration is on a novel
  chapterId   String?  // If collaboration is on a specific chapter
  role        NovelRole @default(VIEWER)
  user        User     @relation(fields: [userId], references: [id])
  novel     Novel? @relation(fields: [projectId], references: [id])
  chapter     Chapter? @relation(fields: [chapterId], references: [id])
}

enum NovelRole {
  CREATOR
  EDITOR
  VIEWER
}

enum SystemRole {
  ADMIN
  USER
}